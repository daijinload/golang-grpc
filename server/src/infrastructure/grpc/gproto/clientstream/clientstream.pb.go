// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clientstream.proto

package clientstream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	helloworld "golang-grpc/server/src/infrastructure/grpc/gproto/helloworld"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("clientstream.proto", fileDescriptor_f40fd65124221ea4) }

var fileDescriptor_f40fd65124221ea4 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8e, 0x31, 0x0b, 0xc2, 0x30,
	0x10, 0x46, 0x75, 0x11, 0x29, 0x0e, 0x25, 0x83, 0x48, 0x47, 0x27, 0x17, 0x1b, 0xd0, 0x5d, 0x8a,
	0x2e, 0xce, 0xb6, 0x93, 0x5b, 0x8c, 0x67, 0x2c, 0x9c, 0x4d, 0xbd, 0xbb, 0x2a, 0xfd, 0xf7, 0xe2,
	0xb9, 0x74, 0x70, 0x7d, 0xef, 0x7d, 0xf0, 0x25, 0xc6, 0x63, 0x0d, 0x8d, 0xb0, 0x10, 0xb8, 0x47,
	0xde, 0x52, 0x94, 0x68, 0x66, 0x43, 0x96, 0xa5, 0x77, 0x40, 0x8c, 0xef, 0x48, 0x78, 0xfd, 0xf9,
	0x4d, 0x95, 0xa4, 0x07, 0x2d, 0x4a, 0x2d, 0x2a, 0x60, 0x31, 0x45, 0x32, 0x2d, 0x5d, 0x7f, 0xfc,
	0xa6, 0x66, 0x91, 0x0f, 0x26, 0x8a, 0x4e, 0xf0, 0xec, 0x80, 0x25, 0x9b, 0xff, 0x31, 0x2d, 0xf6,
	0xcb, 0xd1, 0x6a, 0xbc, 0x2f, 0xce, 0xbb, 0x10, 0xd1, 0x35, 0x61, 0x1d, 0xa8, 0xf5, 0x96, 0x81,
	0x5e, 0x40, 0x96, 0xc9, 0xdb, 0xba, 0xb9, 0x91, 0x63, 0xa1, 0xce, 0x4b, 0x47, 0x60, 0x55, 0x07,
	0xbd, 0x62, 0x87, 0x4f, 0x2f, 0x13, 0x65, 0xdb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x95,
	0x43, 0xfe, 0xd4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientStreamTestClient is the client API for ClientStreamTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientStreamTestClient interface {
	SayHello(ctx context.Context, opts ...grpc.CallOption) (ClientStreamTest_SayHelloClient, error)
}

type clientStreamTestClient struct {
	cc *grpc.ClientConn
}

func NewClientStreamTestClient(cc *grpc.ClientConn) ClientStreamTestClient {
	return &clientStreamTestClient{cc}
}

func (c *clientStreamTestClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (ClientStreamTest_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientStreamTest_serviceDesc.Streams[0], "/clientstream.ClientStreamTest/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamTestSayHelloClient{stream}
	return x, nil
}

type ClientStreamTest_SayHelloClient interface {
	Send(*helloworld.HelloRequest) error
	CloseAndRecv() (*helloworld.HelloReply, error)
	grpc.ClientStream
}

type clientStreamTestSayHelloClient struct {
	grpc.ClientStream
}

func (x *clientStreamTestSayHelloClient) Send(m *helloworld.HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamTestSayHelloClient) CloseAndRecv() (*helloworld.HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(helloworld.HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamTestServer is the server API for ClientStreamTest service.
type ClientStreamTestServer interface {
	SayHello(ClientStreamTest_SayHelloServer) error
}

// UnimplementedClientStreamTestServer can be embedded to have forward compatible implementations.
type UnimplementedClientStreamTestServer struct {
}

func (*UnimplementedClientStreamTestServer) SayHello(srv ClientStreamTest_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterClientStreamTestServer(s *grpc.Server, srv ClientStreamTestServer) {
	s.RegisterService(&_ClientStreamTest_serviceDesc, srv)
}

func _ClientStreamTest_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamTestServer).SayHello(&clientStreamTestSayHelloServer{stream})
}

type ClientStreamTest_SayHelloServer interface {
	SendAndClose(*helloworld.HelloReply) error
	Recv() (*helloworld.HelloRequest, error)
	grpc.ServerStream
}

type clientStreamTestSayHelloServer struct {
	grpc.ServerStream
}

func (x *clientStreamTestSayHelloServer) SendAndClose(m *helloworld.HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamTestSayHelloServer) Recv() (*helloworld.HelloRequest, error) {
	m := new(helloworld.HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientStreamTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientstream.ClientStreamTest",
	HandlerType: (*ClientStreamTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _ClientStreamTest_SayHello_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clientstream.proto",
}
