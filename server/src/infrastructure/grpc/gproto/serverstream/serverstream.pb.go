// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverstream.proto

package serverstream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	helloworld "golang-grpc/server/src/infrastructure/grpc/gproto/helloworld"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("serverstream.proto", fileDescriptor_35edb3ef4a25fe52) }

var fileDescriptor_35edb3ef4a25fe52 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x2a, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x93, 0x12, 0xc8, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0x81, 0xc8,
	0x1b, 0x85, 0x70, 0x09, 0x04, 0x83, 0x55, 0x04, 0x83, 0x55, 0x84, 0xa4, 0x16, 0x97, 0x08, 0x39,
	0x70, 0x71, 0x04, 0x27, 0x56, 0x7a, 0x80, 0x94, 0x0a, 0x49, 0xe8, 0x21, 0x69, 0x01, 0x0b, 0x05,
	0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x48, 0x89, 0x61, 0x91, 0x29, 0xc8, 0xa9, 0x54, 0x62, 0x30,
	0x60, 0x74, 0x72, 0x88, 0xb2, 0x4b, 0xcf, 0xcf, 0x49, 0xcc, 0x4b, 0xd7, 0x4d, 0x2f, 0x2a, 0x48,
	0xd6, 0x87, 0xb8, 0x41, 0xbf, 0xb8, 0x28, 0x59, 0x3f, 0x33, 0x2f, 0xad, 0x28, 0xb1, 0xb8, 0xa4,
	0xa8, 0x34, 0xb9, 0xa4, 0xb4, 0x28, 0x55, 0x1f, 0x2c, 0x9d, 0x0e, 0x76, 0x8a, 0x3e, 0xb2, 0x4b,
	0x93, 0xd8, 0xc0, 0x62, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0x1a, 0x0b, 0x6d, 0xd4,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerStreamTestClient is the client API for ServerStreamTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerStreamTestClient interface {
	SayHello(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (ServerStreamTest_SayHelloClient, error)
}

type serverStreamTestClient struct {
	cc *grpc.ClientConn
}

func NewServerStreamTestClient(cc *grpc.ClientConn) ServerStreamTestClient {
	return &serverStreamTestClient{cc}
}

func (c *serverStreamTestClient) SayHello(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (ServerStreamTest_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServerStreamTest_serviceDesc.Streams[0], "/serverstream.ServerStreamTest/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamTestSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreamTest_SayHelloClient interface {
	Recv() (*helloworld.HelloReply, error)
	grpc.ClientStream
}

type serverStreamTestSayHelloClient struct {
	grpc.ClientStream
}

func (x *serverStreamTestSayHelloClient) Recv() (*helloworld.HelloReply, error) {
	m := new(helloworld.HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamTestServer is the server API for ServerStreamTest service.
type ServerStreamTestServer interface {
	SayHello(*helloworld.HelloRequest, ServerStreamTest_SayHelloServer) error
}

// UnimplementedServerStreamTestServer can be embedded to have forward compatible implementations.
type UnimplementedServerStreamTestServer struct {
}

func (*UnimplementedServerStreamTestServer) SayHello(req *helloworld.HelloRequest, srv ServerStreamTest_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterServerStreamTestServer(s *grpc.Server, srv ServerStreamTestServer) {
	s.RegisterService(&_ServerStreamTest_serviceDesc, srv)
}

func _ServerStreamTest_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(helloworld.HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamTestServer).SayHello(m, &serverStreamTestSayHelloServer{stream})
}

type ServerStreamTest_SayHelloServer interface {
	Send(*helloworld.HelloReply) error
	grpc.ServerStream
}

type serverStreamTestSayHelloServer struct {
	grpc.ServerStream
}

func (x *serverStreamTestSayHelloServer) Send(m *helloworld.HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

var _ServerStreamTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverstream.ServerStreamTest",
	HandlerType: (*ServerStreamTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _ServerStreamTest_SayHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serverstream.proto",
}
