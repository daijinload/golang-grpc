// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bidirectionalstream.proto

package bidirectionalstream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	helloworld "golang-grpc/server/src/infrastructure/grpc/gproto/helloworld"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("bidirectionalstream.proto", fileDescriptor_af3cb433a1aacd19) }

var fileDescriptor_af3cb433a1aacd19 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8e, 0xbd, 0xaa, 0xc2, 0x40,
	0x10, 0x46, 0x6f, 0x9a, 0x8b, 0xa4, 0x92, 0x08, 0xfe, 0xa4, 0xb4, 0xb2, 0x31, 0x2b, 0xfa, 0x06,
	0x01, 0xd1, 0xda, 0x58, 0x09, 0x16, 0x9b, 0xcd, 0xb8, 0x2e, 0xac, 0x99, 0x38, 0x33, 0x51, 0xf2,
	0xf6, 0xe2, 0xda, 0xa4, 0x48, 0xfb, 0x9d, 0xf3, 0xc1, 0x89, 0x17, 0xa5, 0xab, 0x1c, 0x81, 0x11,
	0x87, 0xb5, 0xf6, 0x2c, 0x04, 0xfa, 0x91, 0x35, 0x84, 0x82, 0xc9, 0x64, 0x00, 0xa5, 0xe3, 0x3b,
	0x78, 0x8f, 0x6f, 0x24, 0x5f, 0xfd, 0xb4, 0xed, 0x35, 0x9e, 0xe5, 0x7d, 0xb1, 0x08, 0xe2, 0x19,
	0x58, 0x92, 0x3c, 0x1e, 0x15, 0xba, 0x3b, 0x7e, 0x1f, 0xc9, 0x3c, 0xeb, 0x3d, 0xc3, 0x74, 0x82,
	0x67, 0x0b, 0x2c, 0xe9, 0x74, 0x80, 0x34, 0xbe, 0x5b, 0xfe, 0xad, 0xa2, 0x4d, 0x94, 0x1f, 0x2e,
	0x7b, 0x8b, 0x5e, 0xd7, 0x76, 0x6d, 0xa9, 0x31, 0x8a, 0x81, 0x5e, 0x40, 0x8a, 0xc9, 0x28, 0x57,
	0xdf, 0x48, 0xb3, 0x50, 0x6b, 0xa4, 0x25, 0x50, 0x01, 0xdb, 0xd0, 0xa4, 0x06, 0xca, 0xcb, 0xff,
	0x80, 0x76, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x7e, 0x03, 0x82, 0xf2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BidirectionalStreamTestClient is the client API for BidirectionalStreamTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BidirectionalStreamTestClient interface {
	SayHello(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamTest_SayHelloClient, error)
}

type bidirectionalStreamTestClient struct {
	cc *grpc.ClientConn
}

func NewBidirectionalStreamTestClient(cc *grpc.ClientConn) BidirectionalStreamTestClient {
	return &bidirectionalStreamTestClient{cc}
}

func (c *bidirectionalStreamTestClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamTest_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BidirectionalStreamTest_serviceDesc.Streams[0], "/bidirectionalstream.BidirectionalStreamTest/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectionalStreamTestSayHelloClient{stream}
	return x, nil
}

type BidirectionalStreamTest_SayHelloClient interface {
	Send(*helloworld.HelloRequest) error
	Recv() (*helloworld.HelloReply, error)
	grpc.ClientStream
}

type bidirectionalStreamTestSayHelloClient struct {
	grpc.ClientStream
}

func (x *bidirectionalStreamTestSayHelloClient) Send(m *helloworld.HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectionalStreamTestSayHelloClient) Recv() (*helloworld.HelloReply, error) {
	m := new(helloworld.HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalStreamTestServer is the server API for BidirectionalStreamTest service.
type BidirectionalStreamTestServer interface {
	SayHello(BidirectionalStreamTest_SayHelloServer) error
}

// UnimplementedBidirectionalStreamTestServer can be embedded to have forward compatible implementations.
type UnimplementedBidirectionalStreamTestServer struct {
}

func (*UnimplementedBidirectionalStreamTestServer) SayHello(srv BidirectionalStreamTest_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterBidirectionalStreamTestServer(s *grpc.Server, srv BidirectionalStreamTestServer) {
	s.RegisterService(&_BidirectionalStreamTest_serviceDesc, srv)
}

func _BidirectionalStreamTest_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalStreamTestServer).SayHello(&bidirectionalStreamTestSayHelloServer{stream})
}

type BidirectionalStreamTest_SayHelloServer interface {
	Send(*helloworld.HelloReply) error
	Recv() (*helloworld.HelloRequest, error)
	grpc.ServerStream
}

type bidirectionalStreamTestSayHelloServer struct {
	grpc.ServerStream
}

func (x *bidirectionalStreamTestSayHelloServer) Send(m *helloworld.HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectionalStreamTestSayHelloServer) Recv() (*helloworld.HelloRequest, error) {
	m := new(helloworld.HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BidirectionalStreamTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bidirectionalstream.BidirectionalStreamTest",
	HandlerType: (*BidirectionalStreamTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _BidirectionalStreamTest_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectionalstream.proto",
}
